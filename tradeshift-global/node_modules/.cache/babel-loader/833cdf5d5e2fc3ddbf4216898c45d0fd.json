{"ast":null,"code":"'use stric';\n\nimport data from './data/searchResults.json';\nimport countries from './data/countries.json';\nconsole.log(data);\nconst REQUEST_HOLD_TIME = 1000;\n\nasync function searchForCountry(searchText, countryCode) {\n  return new Promise((resolve, _reject) => {\n    setTimeout(() => {\n      const results = data.filter(d => {\n        if (countryCode) {\n          const countryNames = countries.filter(c => c.code === countryCode);\n\n          if (countryNames && countryNames.length == 1) {\n            return d.name.toLowerCase().startsWith(searchText.toLowerCase()) && d.country === countryNames[0];\n          } else {\n            return false;\n          }\n        } else return d.name.toLowerCase().startsWith(searchText.toLowerCase());\n      });\n      console.log('--------Results------------');\n      console.log(results);\n      resolve(results);\n    }, REQUEST_HOLD_TIME);\n  });\n}\n\nasync function getCountries() {\n  return new Promise((resolve, _reject) => {\n    setTimeout(() => {\n      console.log('Countries ------------');\n      console.log(countries);\n      resolve(countries);\n    }, REQUEST_HOLD_TIME);\n  });\n}\n\nexport const defaultHeaders = {\n  \"Content-Type\": \"application/json\",\n  \"Authorization\": \"\"\n};\nexport default async function Api({\n  url,\n  method = 'GET',\n  data,\n  headers = defaultHeaders\n}) {\n  console.log(`-------request url------${url}`);\n  console.log('------request data-------');\n  console.log(data);\n\n  if (url === 'searchcountry') {\n    console.log('invokeing call');\n    return searchForCountry(data.searchText, data.countryCode);\n  } else if (url === 'getcountries') {\n    return getCountries();\n  } else {\n    return [];\n  }\n}","map":{"version":3,"sources":["/Users/rthota/Downloads/tradeshift fe tech challenge/tradeshift-global/src/components/fetch.js"],"names":["data","countries","console","log","REQUEST_HOLD_TIME","searchForCountry","searchText","countryCode","Promise","resolve","_reject","setTimeout","results","filter","d","countryNames","c","code","length","name","toLowerCase","startsWith","country","getCountries","defaultHeaders","Api","url","method","headers"],"mappings":"AAAA;;AAEA,OAAOA,IAAP,MAAiB,2BAAjB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACAC,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEA,MAAMI,iBAAiB,GAAG,IAA1B;;AAEA,eAAeC,gBAAf,CAAgCC,UAAhC,EAA4CC,WAA5C,EAAyD;AACrD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,OAAV,KAAsB;AACrCC,IAAAA,UAAU,CAAC,MAAM;AACb,YAAMC,OAAO,GAAGZ,IAAI,CAACa,MAAL,CAAYC,CAAC,IAAI;AAC7B,YAAIP,WAAJ,EAAiB;AACb,gBAAMQ,YAAY,GAAGd,SAAS,CAACY,MAAV,CAAiBG,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAWV,WAAjC,CAArB;;AACA,cAAIQ,YAAY,IAAIA,YAAY,CAACG,MAAb,IAAuB,CAA3C,EAA8C;AAC1C,mBAAOJ,CAAC,CAACK,IAAF,CAAOC,WAAP,GAAqBC,UAArB,CAAgCf,UAAU,CAACc,WAAX,EAAhC,KACHN,CAAC,CAACQ,OAAF,KAAcP,YAAY,CAAC,CAAD,CAD9B;AAEH,WAHD,MAGO;AACH,mBAAO,KAAP;AACH;AACJ,SARD,MAUI,OAAOD,CAAC,CAACK,IAAF,CAAOC,WAAP,GAAqBC,UAArB,CAAgCf,UAAU,CAACc,WAAX,EAAhC,CAAP;AACP,OAZe,CAAhB;AAaAlB,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYS,OAAZ;AACAH,MAAAA,OAAO,CAACG,OAAD,CAAP;AACH,KAjBS,EAiBPR,iBAjBO,CAAV;AAkBH,GAnBM,CAAP;AAoBH;;AAED,eAAemB,YAAf,GAA8B;AAC1B,SAAO,IAAIf,OAAJ,CAAY,CAACC,OAAD,EAAUC,OAAV,KAAsB;AACrCC,IAAAA,UAAU,CAAC,MAAM;AACbT,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACAQ,MAAAA,OAAO,CAACR,SAAD,CAAP;AACH,KAJS,EAIPG,iBAJO,CAAV;AAKH,GANM,CAAP;AAOH;;AAED,OAAO,MAAMoB,cAAc,GAAG;AAC1B,kBAAgB,kBADU;AAE1B,mBAAiB;AAFS,CAAvB;AAKP,eAAe,eAAeC,GAAf,CAAmB;AAC9BC,EAAAA,GAD8B;AAE9BC,EAAAA,MAAM,GAAG,KAFqB;AAG9B3B,EAAAA,IAH8B;AAI9B4B,EAAAA,OAAO,GAAGJ;AAJoB,CAAnB,EAKZ;AACCtB,EAAAA,OAAO,CAACC,GAAR,CAAa,2BAA0BuB,GAAI,EAA3C;AACAxB,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;;AACA,MAAI0B,GAAG,KAAK,eAAZ,EAA6B;AACzBxB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,WAAOE,gBAAgB,CAACL,IAAI,CAACM,UAAN,EAAkBN,IAAI,CAACO,WAAvB,CAAvB;AACH,GAHD,MAGO,IAAImB,GAAG,KAAK,cAAZ,EAA4B;AAC/B,WAAOH,YAAY,EAAnB;AACH,GAFM,MAEA;AACH,WAAO,EAAP;AACH;AACJ","sourcesContent":["'use stric';\n\nimport data from './data/searchResults.json'\nimport countries from './data/countries.json'\nconsole.log(data);\n\nconst REQUEST_HOLD_TIME = 1000;\n\nasync function searchForCountry(searchText, countryCode) {\n    return new Promise((resolve, _reject) => {\n        setTimeout(() => {\n            const results = data.filter(d => {\n                if (countryCode) {\n                    const countryNames = countries.filter(c => c.code === countryCode);\n                    if (countryNames && countryNames.length == 1) {\n                        return d.name.toLowerCase().startsWith(searchText.toLowerCase()) &&\n                            d.country === countryNames[0];\n                    } else {\n                        return false;\n                    }\n                }\n                else\n                    return d.name.toLowerCase().startsWith(searchText.toLowerCase());\n            })\n            console.log('--------Results------------');\n            console.log(results);\n            resolve(results);\n        }, REQUEST_HOLD_TIME)\n    });\n}\n\nasync function getCountries() {\n    return new Promise((resolve, _reject) => {\n        setTimeout(() => {\n            console.log('Countries ------------');\n            console.log(countries);\n            resolve(countries);\n        }, REQUEST_HOLD_TIME)\n    })\n}\n\nexport const defaultHeaders = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"\"\n};\n\nexport default async function Api({\n    url,\n    method = 'GET',\n    data,\n    headers = defaultHeaders,\n}) {\n    console.log(`-------request url------${url}`);\n    console.log('------request data-------');\n    console.log(data);\n    if (url === 'searchcountry') {\n        console.log('invokeing call')\n        return searchForCountry(data.searchText, data.countryCode);\n    } else if (url === 'getcountries') {\n        return getCountries();\n    } else {\n        return []\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}